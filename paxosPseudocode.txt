
******************* 
To help debug, print out every receive and send message and who you're sending to
States I need to add to PRM - stop/resume, send update messages to all outgoing

 if replicate:
    prm.proposedFile = the second part of the replicate message that was validated by CLI
    prm.ballot[0] += 1 #change ballot number
    send all prms Message(prm.ballot, prm.id, index, "PREPARE")
idea 1- 
if stop: 
    tear down all incoming channels, so you can only listen to cmds from CLI
if resume: 
    reestablish all connections
idea 2 - 
if stop: 
    Add an extra if statement validation on resume/stop state of PRM on commThread()
    Any message taken in, don't do anything 
if resume: 
    resume as normal inside of commThread
    if state = replicate: 
        send proposal to everyone 
    if state != replicate: 
        upon receiving a proposal, if index they're proposing > last index in ur array, ask that node for updates

if total, print, merge EASY: 
    add up total words inside each files 



if Prepare: 
	if msg.index < prm.index: 
		send("update", log entries and corresponding index) to msg.source_id
    if msg.ballot > prm.ballot:
        if index of proposal > prm.index:
            ask that source_id for your missing entries in log
        if index of proposal < prm.index: 
            update the source_id all the entries in the log before the proposal
        prm.ballot = msg.ballot
        send Ack(prm.id, prm.ballot, acceptTuple, acceptVal, index, msg.originalPRM ACK) to original preparer
if Ack: 
    Keep track array of array of ACK messages objects
    prm.ackArray.append(msg)
    if len(prm.ackarray) + 1 > upper(0.5*prm.num_nodes):
        tempAcceptTuple = [None, None] #message with the highest acceptTuple
        tempAcceptVal = None #acceptVal with the highest acceptTuple
        isValue = false
        for msgs messages prm.ackArray: 
            check if there are any messages that contains acceptVal 
            if there are:
                isValue = true
                #max of acceptTuple for ACK messages array, 
                tempAcceptTuple = msg with highest acceptTuple.acceptTuple 
                tempAcceptVal = msg with highest acceptTuple.acceptVal    

        if counter == 0:
            prm.acceptTuple = prm.ballot
            prm.acceptVal = prm.proposedFile
        else: 
            prm.acceptTuple = tempAcceptTuple
            prm.acceptVal = tempAcceptVal
        for all outgoing channels:
            send(prm.id, prm.ballot, prm.acceptTuple, prm.acceptVal, prm.index, originalPRM, "ACCEPT")
            TODO ORIGINAL PRM SHOULD BE LISTENING FOR ACCEPTS FROM MAJORITY IF NOT REPROPOSE

if ACCEPT: 
    if msg.index > prm.index: 
       	send(prm.id, None, None, None, None, None, None, "UPDATE") #Ask for entire log
    if msg.ballot >= prm.ballot: 
        prm.acceptTuple = msg.acceptTuple 
        prm.acceptVal = msg.acceptVal
        for all outgoing channels:
            send(prm.id, prm.ballot, None, prm.acceptVal, prm.index,  "ACCEPT")
        if msg.originalPRM == prm.id: 
            prm.numAccepts += 1
        if prm.numAccepts >= upper(prm.num_nodes/2): 
            log[msg.index] = prm.proposedFile
            for all outgoing channels: 
                send(prm.id, None, None, prm.proposedFile, prm.index, msg.originalPRM, None, "DECIDE")
            send("finished with replicate and your file successfully added to log") to CLI
    
if DECIDE: 
	if msg.index > prm.index:
		send(prm.id, prm.index, "UPDATE") to msg.originalPRM
	prm.log[prm.index] = msg.acceptVal #filename
	prm.index += 1
	prm.newRoundCleanUp()

if UPDATE:
	if msg.index < prm.index:
		#update msg.source_id
		counter = msg.index
		while counter != prm.index + 1: #send all missing log entries one by one
			send(prm.id, counter, prm.log[counter], "UPDATE") to msg.source_id 
			counter += 1
	elif (msg.index > prm.index) and (msg.log != None):
		#please update me
		prm.log[msg.index] = msg.log 			

